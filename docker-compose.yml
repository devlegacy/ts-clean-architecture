version: '3.9'

services:
  eventstore.db:
    image: eventstore/eventstore:latest
    environment:
      - EVENTSTORE_CLUSTER_SIZE=1
      - EVENTSTORE_RUN_PROJECTIONS=All
      - EVENTSTORE_START_STANDARD_PROJECTIONS=true
      - EVENTSTORE_INSECURE=true
      - EVENTSTORE_ENABLE_EXTERNAL_TCP=true
      - EVENTSTORE_ENABLE_ATOM_PUB_OVER_HTTP=true
    ports:
      - '1113:1113'
      - '2113:2113'
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    # esdb://eventstore.db:2113?tls=false
    # http://localhost:2113/
    networks:
      - app-network

  zookeeper:
    container_name: zookeeper
    image: docker.io/bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    container_name: kafka
    image: docker.io/bitnami/kafka:latest
    hostname: localhost
    ports:
      - "9092:9092"
      - "9093:9093"
      - "29092:29092"
    environment:
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNALPLAINTEXT://:29092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNALPLAINTEXT://localhost:29092,EXTERNAL://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNALPLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=EXTERNALPLAINTEXT
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      # - KAFKA_ADVERTISED_HOST_NAME=192.168.1.68
    depends_on:
      - zookeeper
    networks:
      - app-network

  debezium:
    container_name: debezium
    image: debezium/connect:latest
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my-connect-configs
      OFFSET_STORAGE_TOPIC: my-connect-offsets
      BOOTSTRAP_SERVERS: kafka:9092
      ADVERTISED_HOST_NAME: debezium
    ports:
      - "8083:8083"
    depends_on:
      - kafka
    networks:
      - app-network

  mongo:
    image: mongo:latest # 5.0.0
    restart: always
    environment:
      # MONGO_INITDB_ROOT_USERNAME: root
      # MONGO_INITDB_ROOT_PASSWORD: root
      - MONGO_URL=mongodb://mongo:27017/dev
    ports:
      # HOST:CONTAINER
      - 27017:27017
    # Persistence
    volumes:
      - ./.data/mongo:/data/db:delegated

  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: unless-stopped
    command: [ "postgres", "-c", "wal_level=logical", "-c", "max_wal_senders=1" , "-c", "max_replication_slots=1" ]
    environment:
      POSTGRES_DB: mooc # postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data
    ports:
      # HOST:CONTAINER
      - "5432:5432"
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    depends_on:
      - postgres
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@postgres.com
      PGADMIN_DEFAULT_PASSWORD: postgres
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_LISTEN_ADDRESS: "[::]"
    ports:
      # HOST:CONTAINER
      # ${PGADMIN_PORT:-8080}
      - "8080:80"
    volumes:
      - ./.data/pgadmin:/var/lib/pgadmin
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    restart: always

  redis:
    container_name: redis
    # image: redis:alpine
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    # command: [ "redis-server", "--requirepass", "SUPER_SECRET_PASSWORD" ]
    # volumes:
    #   - ./.data/redis:/data
    environment:
      - REDIS_ARGS=--requirepass SUPER_SECRET_PASSWORD
    networks:
      - app-network
    # redis-cli --pass SUPER_SECRET_PASSWORD
    # JSON.GET blocks
    # [redis-cli] info modules --pass SUPER_SECRET_PASSWORD

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3 # 8.5.3
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node #Elasticsearch forms a single-node cluster
      - bootstrap.memory_lock=true # might cause the JVM or shell session to exit if it tries to allocate more memory than is available!
      - 'ES_JAVA_OPTS=-Xms2048m -Xmx2048m'
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1 # The memlock soft and hard values configures the range of memory that ElasticSearch will use. Setting this to â€“1 means unlimited.
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
      # - certs:/usr/share/elasticsearch/config/certs
    ports:
      - '9200:9200'
    networks:
      - app-network

  # localhost:5601
  kibana:
    image: docker.elastic.co/kibana/kibana:8.5.3
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    # volumes:
    #   - certs:/usr/share/kibana/config/certs
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    networks:
      - app-network

  keycloak:
    command: start
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    volumes:
      - ./.data/keycloak:/opt/jboss/keycloak/standalone/data/
    ports:
      # HOST:CONTAINER
      - 8081:8080
      - 8082:8443
    restart: unless-stopped
    environment:
      # Credentials for admin account
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      # - KEYCLOAK_LOGLEVEL=DEBUG
      # - ROOT_LOGLEVEL=DEBUG
      # Credentials for storing into an external database
      - KC_DB=postgres
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_PORT=5432
      # - KC_DB_URL_DATABASE=keycloak
      # - KC_DB_SCHEMA=keycloak
      - KC_DB_USERNAME=postgres
      - KC_DB_PASSWORD=postgres
      - KC_HTTP_ENABLED=true
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
    # logging:
    #   driver: journald
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge
    ipam:
      driver: default

# docker-compose up -d
volumes:
  certs:
    driver: local
  esdata:
    driver: local
  eventstore-volume-data:
  eventstore-volume-logs:
