{"file":"C:\\Users\\Devlegacy\\repositories\\devlegacy\\ts-clean-architecture\\src\\contexts\\mooc\\courses\\application\\course.creator.ts","mappings":";AAAA;;;;GAIG;;;AAEH,6CAAyC;AAGzC,MAAa,aAAa;IACJ;IAApB,YAAoB,UAA4B;QAA5B,eAAU,GAAV,UAAU,CAAkB;IAAG,CAAC;IAEpD,KAAK,CAAC,GAAG,CAAC,EAAU,EAAE,IAAY,EAAE,QAAgB;QAClD,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAA;QAE7C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IACrC,CAAC;CACF;AARD,sCAQC","names":[],"sources":["C:\\Users\\Devlegacy\\repositories\\devlegacy\\ts-clean-architecture\\src\\contexts\\mooc\\courses\\application\\course.creator.ts"],"sourcesContent":["/**\n * Note: Always import of domain never *Infrastructure*\n * Todas las capas de nuestra arquitectura más externas solo deberían depender de las capas más internas (infraestructura -> application -> domain)\n * Esta premisa debe garantizar que si cambiamos algo de infraestructura (no hay que modificar) no se afecta el comportamiento del dominio\n */\n\nimport { Course } from '../domain/course'\nimport { CourseRepository } from '../domain/course.repository'\n\nexport class CourseCreator {\n  constructor(private repository: CourseRepository) {}\n\n  async run(id: string, name: string, duration: string) {\n    const course = new Course(id, name, duration)\n\n    return this.repository.save(course)\n  }\n}\n"],"version":3}